import QtQuick 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    visible: true
    title: "Simulazione Estuario"
    visibility: Window.Maximized

    
    property string outputFileName
    property string startDate
    property string simulationDuration
    property string timeStep
    property string outputVars

    property string channelDataFile
    property string crossSectionFile
    property string initialCondition
    property string boundaryConditionUpper: "0"
    property string boundaryConditionLower: "0"
    property string fileDEBC
    property string fileHydro

    StackView {
        id: stackView
        anchors.fill: parent
        initialItem: page1
    }

   
    Component {
        id: page1
        Rectangle {
            color: "#f0f0f0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9

                Text {
                    text: "Impostazioni Simulazione"
                    font.pixelSize: 20
                    font.bold: true
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextField {
                    id: startDate
                    placeholderText: "Data di inizio (GG/MM/AAAA)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: simulationDuration
                    placeholderText: "Durata della simulazione (secondi)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: timeStep
                    placeholderText: "Passo temporale (secondi)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: outputFileName
                    placeholderText: "Nome file di output"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: outputVars
                    placeholderText: "Variabili di output"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: channelDataFile
                    placeholderText: "Nome file dati canale"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: initialCondition
                    placeholderText: "Condizione iniziale"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Text { text: "Condizione di confine superiore" }
                TextField {
                    id: boundaryConditionUpper
                    placeholderText: "Condizione di confine superiore"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Text { text: "Condizione di confine inferiore" }
                TextField {
                    id: boundaryConditionLower
                    placeholderText: "Condizione di confine inferiore"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Avanti"
                        onClicked: {
                            stackView.push(page2)
                        }
                    }
                }
            }
        }
    }
    
    Component {
        id: page2
        Rectangle {
            color: "#f0f0f0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9

                Text {
                    text: "Altre Impostazioni"
                    font.pixelSize: 20
                    font.bold: true
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextField {
                    id: outputFileName
                    placeholderText: "Nome file di output"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: outputVars
                    placeholderText: "Variabili di output"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: channelDataFile
                    placeholderText: "Nome file dati canale"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: initialCondition
                    placeholderText: "Condizione iniziale"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Avanti"
                        onClicked: {
                            stackView.push(page3)
                        }
                    }
                }
            }
        }
    }


    Component {
        id: page3
        Rectangle {
            color: "#d0d0d0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9

                Text {
                    text: "Costanti e Metodi di Calcolo"
                    font.pixelSize: 20
                    font.bold: true
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextField {
                    id: courantNumberField
                    placeholderText: "Numero Courant (0 - 1)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Text { text: "Limitatore di flusso McComarck (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "SÃ¬"; checked: flowLimiter === "y"; onCheckedChanged: flowLimiter = "y" }
                    RadioButton { text: "No"; checked: flowLimiter === "n"; onCheckedChanged: flowLimiter = "n" }
                }

                Text { text: "Equazione per il flusso limitatore" }
                ComboBox {
                    id: flowLimiterEquation
                    width: parent.width * 0.8
                    height: 40
                    model: ["MinMod", "Roe", "Van Leer", "Van Albada"]
                    onCurrentIndexChanged: flowLimiterEquation = model[currentIndex]
                }

                Text { text: "Formula Psi" }
                ComboBox {
                    id: psiFormulaSelector
                    width: parent.width * 0.8
                    height: 40
                    model: ["1 = Garcia-Navarro", "2 = Tseng"]
                    onCurrentIndexChanged: psiFormula = model[currentIndex].split(" = ")[0]
                }

                TextField {
                    id: psiFormulaDisplay
                    text: "Formula Psi selezionata: " + psiFormula
                    width: parent.width * 0.8
                    height: 40
                    readOnly: true
                }

                TextField {
                    id: deltaValueField
                    placeholderText: "Valore delta"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Text { text: "Metodo del gradiente di superficie (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "SÃ¬"; checked: gradientMethod === "y"; onCheckedChanged: gradientMethod = "y" }
                    RadioButton { text: "No"; checked: gradientMethod === "n"; onCheckedChanged: gradientMethod = "n" }
                }

                Text { text: "Termine sorgente saldo (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "SÃ¬"; checked: sourceTerm === "y"; onCheckedChanged: sourceTerm = "y" }
                    RadioButton { text: "No"; checked: sourceTerm === "n"; onCheckedChanged: sourceTerm = "n" }
                }

                TextField {
                    id: salinityFileField
                    placeholderText: "Nome file salinitÃ "
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: betaSalinityField
                    placeholderText: "Costante beta per la salinitÃ "
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: longitudinalDispersionKhField
                    placeholderText: "Costante di dispersione longitudinale, Kh"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Text { text: "Calcolare il trasporto dei sedimenti (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "SÃ¬"; checked: sedimentTransport === "y"; onCheckedChanged: sedimentTransport = "y" }
                    RadioButton { text: "No"; checked: sedimentTransport === "n"; onCheckedChanged: sedimentTransport = "n" }
                }

                TextField {
                    id: sedimentTransportEquationField
                    placeholderText: "Equazione per il trasporto solido"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                TextField {
                    id: sedimentFileField
                    placeholderText: "Nome file proprietÃ  sedimenti"
                    width: parent.width * 0.8
                    height: 40
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Avvia Simulazione"
                        onClicked: {
                            avviaSimulazione()
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }

    Component {
        id: page4
        Rectangle {
            color: "#f0f0f0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9

                Text {
                    text: "Risultati della Simulazione"
                    font.pixelSize: 20
                    font.bold: true
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextArea {
                    id: page4Result
                    text: "" // Inserisci qui i risultati della simulazione
                    width: parent.width * 0.8
                    height: parent.height * 0.6
                    readOnly: true
                    color: "black"
                    background: Rectangle {
                        color: "white"
                        border.color: "black"
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }



 

    function avviaSimulazione() {
        var durata = parseInt(simulationDuration.text);
        var passoTemporale = parseInt(timeStep.text);
        var courant = parseFloat(courantNumber.text);

        var numPassi = durata / passoTemporale;
        var velocitaFlusso = courant * numPassi;

        var salinitÃ  = 0;
        if (salinityCalculation === "y") {
            var beta = parseFloat(betaSalinity.text);
            var kh = parseFloat(longitudinalDispersionKh.text);
            salinitÃ  = beta * kh * numPassi;
        }

        var trasportoSedimenti = 0;
        if (sedimentTransport === "y") {
            trasportoSedimenti = parseFloat(sedimentTransportEquation.text) * numPassi;
        }

        page4Result.text = "Numero di passi: " + numPassi + "\nVelocitÃ  del flusso: " + velocitaFlusso.toFixed(2) + " m/s" +
                           "\nSalinitÃ : " + salinitÃ .toFixed(2) + " g/L" +
                           "\nTrasporto Sedimenti: " + trasportoSedimenti.toFixed(2) + " kg/s" +
                           "\n\nDettagli:\n" +
                           "Nome del file di output: " + outputFileName.text + "\n" +
                           "Data di inizio: " + startDate.text + "\n" +
                           "Durata della simulazione: " + simulationDuration.text + " secondi\n" +
                           "Passo temporale: " + timeStep.text + " secondi\n" +
                           "Variabili di output: " + outputVars.text + "\n" +
                           "File dati canale: " + channelDataFile.text + "\n" +
                           "Condizione iniziale: " + initialCondition.text + "\n" +
                           "Condizione di confine superiore: " + boundaryConditionUpper + "\n" +
                           "Condizione di confine inferiore: " + boundaryConditionLower;

        stackView.push(page4);
    }
}
