import QtQuick 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    visible: true
    title: "Simulazione Estuario"
    visibility: Window.Maximized

    property string outputFileName
    property string startDate
    property string simulationDuration
    property string timeStep
    property string outputVars

    property string channelDataFile
    property string crossSectionFile
    property string initialCondition
    property string boundaryConditionUpper
    property string boundaryConditionLower
    property string fileDEBC
    property string fileHydro

    property string courantNumber
    property string flowLimiter
    property string flowLimiterEquation
    property string psiFormula
    property string deltaValue
    property string gradientMethod
    property string sourceTerm

    property string salinityCalculation
    property string salinityFile
    property string betaSalinity
    property string longitudinalDispersionKh
    property string sedimentTransport
    property string sedimentTransportEquation
    property string sedimentFile

    StackView {
        id: stackView
        anchors.fill: parent
        initialItem: page1
    }
    Component {
        id: page1
        Rectangle {
            color: "#ffffff"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9
                Text { text: "Simulazione Estuario"; font.pixelSize: 20; font.bold: true; anchors.horizontalCenter: parent.horizontalCenter }

                TextField {
                    id: outputFileName
                    placeholderText: "Nome del file di output"
                    width: parent.width * 0.8
                    height: 40
                }

                TextField {
                    id: startDate
                    placeholderText: "Data e ora di inizio (hh-mm-ss gg/mm/aaaa)"
                    width: parent.width * 0.8
                    height: 40
                }

                TextField {
                    id: simulationDuration
                    placeholderText: "Durata della simulazione (secondi)"
                    width: parent.width * 0.8
                    height: 40
                }

                TextField {
                    id: outputVars
                    placeholderText: "Variabili di output"
                    width: parent.width * 0.8
                    height: 40
                }

                Row {
                    spacing: 20
                    Text {
                        text: "Unità di misura del passo temporale"
                        font.pixelSize: 14
                        anchors.verticalCenter: parent.verticalCenter
                    }

                    ComboBox {
                        id: timeUnit
                        width: parent.width * 0.3
                        height: 40
                        model: ["Secondi", "Minuti", "Ore"]
                        currentIndex: -1  // Di default non c'è selezione
                        onCurrentIndexChanged: {
                            // Abilita il TextField solo se è selezionata un'unità di misura
                            timeStep.enabled = timeUnit.currentIndex !== -1;
                        }
                    }
                }

                Row {
                    spacing: 20
                    TextField {
                        id: timeStep
                        placeholderText: "Passo temporale"
                        width: parent.width * 0.8
                        height: 40
                        enabled: false  // Inizialmente disabilitato
                        color: "#cccccc"  // Colore grigio per indicare che è disabilitato
                        // Mostra il messaggio di errore se l'unità non è selezionata
                        background: Rectangle {
                            color: timeStep.enabled ? "#ffffff" : "#f0f0f0"
                        }
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Continua"
                        onClicked: {
                            stackView.push(page2)
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }
  }

    Component{
        id: page2
        Rectangle {
            color: "#e0e0e0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9

                Text {
                    text: "Geometria del Canale";
                    font.pixelSize: 20;
                    font.bold: true;
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextField {
                    id: channelDataFile
                    placeholderText: "Nome del file di dati del canale"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: crossSectionFile
                    placeholderText: "Nome file geometria canale sezioni trasversali"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: initialCondition
                    placeholderText: "Condizione iniziale (0 = calma)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Text { text: "Condizione di confine superiore (0 = flusso aperto, 1 = riflettente, 2 = elevazione)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Flusso aperto"; checked: boundaryConditionUpper === "0"; onCheckedChanged: boundaryConditionUpper = "0" }
                    RadioButton { text: "Riflettente"; checked: boundaryConditionUpper === "1"; onCheckedChanged: boundaryConditionUpper = "1" }
                    RadioButton { text: "Elevazione"; checked: boundaryConditionUpper === "2"; onCheckedChanged: boundaryConditionUpper = "2" }
                }

                Text { text: "Condizione di confine inferiore (0 = flusso aperto, 1 = riflettente, 2 = elevazione)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Flusso aperto"; checked: boundaryConditionLower === "0"; onCheckedChanged: boundaryConditionLower = "0" }
                    RadioButton { text: "Riflettente"; checked: boundaryConditionLower === "1"; onCheckedChanged: boundaryConditionLower = "1" }
                    RadioButton { text: "Elevazione"; checked: boundaryConditionLower === "2"; onCheckedChanged: boundaryConditionLower = "2" }
                }

                TextField {
                    id: fileDEBC
                    placeholderText: "Nome file DEBC"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: fileHydro
                    placeholderText: "Nome file idroelettrico"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Continua"
                        onClicked: {
                            stackView.push(page3)
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }
    Component {
        id: page3
        Rectangle {
            color: "#d0d0d0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9
                Text {
                    text: "Costanti e Metodi di Calcolo";
                    font.pixelSize: 20;
                    font.bold: true;
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextField {
                    id: courantNumber
                    placeholderText: "Numero Courant (0 - 1)"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Text { text: "Limitatore di flusso McComarck (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Sì"; checked: flowLimiter === "y"; onCheckedChanged: flowLimiter = "y" }
                    RadioButton { text: "No"; checked: flowLimiter === "n"; onCheckedChanged: flowLimiter = "n" }
                }

                Text { text: "Equazione per il flusso limitatore" }
                ComboBox {
                    id: flowLimiterEquation
                    width: parent.width * 0.8
                    height: 40
                    model: ["MinMod", "Roe", "Van Leer", "Van Albada"]
                    onCurrentIndexChanged: flowLimiterEquation = model[currentIndex]
                }

                Text { text: "Formula Psi" }
                ComboBox {
                    id: psiFormulaSelector
                    width: parent.width * 0.8
                    height: 40
                    model: ["1 = Garcia-Navarro", "2 = Tseng"]
                    onCurrentIndexChanged: psiFormula = model[currentIndex].split(" = ")[0]
                }

                TextField {
                    id: psiFormulaDisplay
                    text: "Formula Psi selezionata: " + psiFormula
                    width: parent.width * 0.8
                    height: 40
                    readOnly: true
                }

                TextField {
                    id: deltaValue
                    placeholderText: "Valore delta"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Text { text: "Metodo del gradiente di superficie (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Sì"; checked: gradientMethod === "y"; onCheckedChanged: gradientMethod = "y" }
                    RadioButton { text: "No"; checked: gradientMethod === "n"; onCheckedChanged: gradientMethod = "n" }
                }

                Text { text: "Termine sorgente saldo (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Sì"; checked: sourceTerm === "y"; onCheckedChanged: sourceTerm = "y" }
                    RadioButton { text: "No"; checked: sourceTerm === "n"; onCheckedChanged: sourceTerm = "n" }
                }

                TextField {
                    id: salinityFile
                    placeholderText: "Nome file salinità"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: betaSalinity
                    placeholderText: "Costante beta per la salinità"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: longitudinalDispersionKh
                    placeholderText: "Costante di dispersione longitudinale, Kh"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Text { text: "Calcolare il trasporto dei sedimenti (y/n)" }
                Row {
                    spacing: 10
                    RadioButton { text: "Sì"; checked: sedimentTransport === "y"; onCheckedChanged: sedimentTransport = "y" }
                    RadioButton { text: "No"; checked: sedimentTransport === "n"; onCheckedChanged: sedimentTransport = "n" }
                }

                TextField {
                    id: sedimentTransportEquation
                    placeholderText: "Equazione per il trasporto solido"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                TextField {
                    id: sedimentFile
                    placeholderText: "Nome file proprietà sedimenti"
                    width: parent.width * 0.8
                    height: 40
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Avvia Simulazione"
                        onClicked: {
                            avviaSimulazione()
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }
    Component {
        id: page4
        Rectangle {
            color: "#f0f0f0"
            Column {
                anchors.centerIn: parent
                spacing: 10
                padding: 20
                width: parent.width * 0.9
                Text {
                    text: "Risultati della Simulazione";
                    font.pixelSize: 20;
                    font.bold: true;
                    anchors.horizontalCenter: parent.horizontalCenter
                }

                TextArea {
                    id: page4Result
                    text: "" // Inserisci qui i risultati della simulazione
                    width: parent.width * 0.8
                    height: parent.height * 0.6
                    readOnly: true
                    color: "black" // Testo nero
                    background: Rectangle {
                        color: "white" // Sfondo bianco
                        border.color: "black" // Bordo nero
                        radius: 5
                    }
                }

                Row {
                    spacing: 20
                    Button {
                        text: "Indietro"
                        onClicked: {
                            stackView.pop()
                        }
                    }
                    Button {
                        text: "Esci"
                        onClicked: Qt.quit()
                    }
                }
            }
        }
    }


    // Aggiungi componenti per altre pagine mantenendo lo stesso approccio di design.

    function avviaSimulazione() {
        var durata = parseInt(simulationDuration.text);
        var passoTemporale = parseInt(timeStep.text);
        var courant = parseFloat(courantNumber.text);

        var numPassi = durata / passoTemporale;
        var velocitaFlusso = courant * numPassi;

        var salinità = 0;
        if (salinityCalculation === "y") {
            var beta = parseFloat(betaSalinity.text);
            var kh = parseFloat(longitudinalDispersionKh.text);
            salinità = beta * kh * numPassi;
        }

        var trasportoSedimenti = 0;
        if (sedimentTransport === "y") {
            trasportoSedimenti = parseFloat(sedimentTransportEquation.text) * numPassi;
        }

        page4Result.text = "Numero di passi: " + numPassi + "\nVelocità del flusso: " + velocitaFlusso.toFixed(2) + " m/s" +
                           "\nSalinità: " + salinità.toFixed(2) + " g/L" +
                           "\nTrasporto Sedimenti: " + trasportoSedimenti.toFixed(2) + " kg/s" +
                           "\n\nDettagli:\n" +
                           "Nome del file di output: " + outputFileName.text + "\n" +
                           "Data di inizio: " + startDate.text + "\n" +
                           "Durata della simulazione: " + simulationDuration.text + " secondi\n" +
                           "Passo temporale: " + timeStep.text + " secondi\n" +
                           "Variabili di output: " + outputVars.text + "\n" +
                           "File dati canale: " + channelDataFile.text + "\n" +
                           "Condizione iniziale: " + initialCondition.text + "\n" +
                           "Condizione di confine superiore: " + boundaryConditionUpper + "\n" +
                           "Condizione di confine inferiore: " + boundaryConditionLower;

        stackView.push(page4);
    }
}
